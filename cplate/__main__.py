# Generated by duckargs, invoked with the following arguments:
# function_specs -b --brace-style allman,knr -a --author erik -c --header-comment-file FILE -l --blank-line-count 2 -r --custom-retvalues str -g --include-guards -d --doxygen-comments

import sys
import os
import argparse

from cplate import config as cplate_config
from cplate.generator import generate_c_module


def main():
    parser = argparse.ArgumentParser(description='A command-line program generated by duckargs',
                                     formatter_class=argparse.ArgumentDefaultsHelpFormatter)

    parser.add_argument('c_filename', help='a string')
    parser.add_argument('h_filename', help='a string')
    parser.add_argument('function_specs', nargs="*", default=[], help='a string')
    parser.add_argument('-x', '--specs-file', type=argparse.FileType(), help='a filename')
    parser.add_argument('-b', '--brace-style', choices=cplate_config.BRACE_STYLES, help='a string')
    parser.add_argument('-a', '--author', help='a string')
    parser.add_argument('-c', '--header-comment-file', type=argparse.FileType(), help='a filename')
    parser.add_argument('-f', '--config-file', type=argparse.FileType(), help='a filename')
    parser.add_argument('-l', '--blank-line-count', type=int, help='an int value')
    parser.add_argument('-r', '--custom-retvalues', nargs="+", help='a string')
    parser.add_argument('-g', '--include-guards', action='store_true', help='include_guards flag')
    parser.add_argument('-d', '--doxygen-comments', action='store_true', help='doxygen_comments flag')
    args = parser.parse_args()

    exc = None
    if args.config_file is not None:
        try:
            config = cplate_config.CplateConfig.from_string(args.config_file.read(),
                                                            args.config_file.name)
        except ValueError as e:
            exc = e
    elif os.path.isfile(cplate_config.DEFAULT_CONFIG_FILE):
        with open(cplate_config.DEFAULT_CONFIG_FILE) as fh:
            try:
                config = cplate_config.CplateConfig.from_string(fh.read())
            except ValueError as e:
                exc = e
    else:
        config = cplate_config.CplateConfig()

    if exc is not None:
        print(str(exc))
        return -1

    if args.brace_style is not None:
        config.brace_style = args.brace_style

    if args.author is not None:
        config.author = args.author

    if args.header_comment_file is not None:
        config.header_comment = args.header_comment_file.read()
    elif os.path.isfile(config.header_comment_file):
        with open(config.header_comment_file, 'r') as fh:
            config.header_comment = fh.read()

    if args.blank_line_count is not None:
        config.blank_line_count = args.blank_line_count

    if args.custom_retvalues is not None:
        custom_retvals = {}
        for retval in args.custom_retvalues:
            fields = retval.split(',')
            if len(fields) != 2:
                print("Error: --custom-retvalues requires one or more comma-separated pairs")
                return -1

            custom_retvals[fields[0]] = fields[1]

        config.custom_return_values = custom_retvals

    if args.include_guards:
        config.include_guards = True

    if args.doxygen_comments:
        config.doxygen_comments = True

    spec_lines = []
    if args.function_specs:
        spec_lines = args.function_specs
    elif args.specs_file is not None:
        spec_lines = args.specs_file.read().strip().split('\n')
    else:
        print("Error: no function specs provided")

    print(spec_lines)

    generate_c_module(args.c_filename, args.h_filename, config, spec_lines)

    return 0

if __name__ == "__main__":
    sys.exit(main())

